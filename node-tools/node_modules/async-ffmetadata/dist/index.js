const exec = require('child_process').exec;
const path = require('path');
export function getExecString(command, attr) {
    let execStr = command;
    attr.map((singleatt, index) => {
        if (singleatt.name !== "" || singleatt.value !== "")
            execStr += " ";
        if (singleatt.name && singleatt.name !== "")
            execStr += `-${singleatt.name}`;
        if (singleatt.value && singleatt.value !== "")
            execStr += `${singleatt.name === "" ? "" : " "}${singleatt.value}`;
    });
    return execStr;
}
export async function getMetaDataFromFile(filePath, options) {
    const ffmpegPath = options?.customFfmpegPath || "ffmpeg";
    const command = getExecString(ffmpegPath, [
        {
            name: "i",
            value: filePath
        },
        {
            name: "f",
            value: "ffmetadata"
        },
        {
            name: "",
            value: "pipe:1"
        }
    ]);
    return new Promise((resolve) => {
        exec(command, (_, stdout, __) => {
            const output = {};
            stdout
                .replace(";FFMETADATA1\n", "")
                .split("\n")
                .map(str => {
                if (str == '')
                    return true;
                const splitstr = str.split("=");
                output[splitstr[0]
                    .replace(/(-|_)[a-zA-Z]/g, (rep) => {
                    return rep.replace('-', '').replace('_', '').toUpperCase();
                })] = splitstr[1];
                return true;
            });
            resolve(output);
        });
    });
}
export async function setMetaDataToFile(metaData, inFilePath, outFilePath, options) {
    const ffmpegPath = options?.customFfmpegPath || "ffmpeg";
    function getCommand() {
        let commandArray = [
            {
                name: "i",
                value: inFilePath
            }
        ];
        Object.keys(metaData).map((value) => {
            commandArray.push({
                name: "metadata",
                value: `${value}=\"${metaData[value]}\"`
            });
            return true;
        });
        commandArray = commandArray.concat([
            {
                name: "c",
                value: "copy"
            },
            {
                name: "",
                value: outFilePath
            },
            {
                name: "y",
                value: ""
            }
        ]);
        return getExecString(ffmpegPath, commandArray);
    }
    const command = getCommand();
    return new Promise(resolve => {
        if (path.relative(inFilePath, outFilePath) === '')
            resolve(false);
        else {
            exec(command, (err, _, __) => {
                if (err)
                    resolve(false);
                else
                    resolve(true);
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUMxQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7QUFTNUIsTUFBTSxVQUFVLGFBQWEsQ0FBQyxPQUFlLEVBQUUsSUFBcUM7SUFDbEYsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBRXJCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFFNUIsSUFBRyxTQUFTLENBQUMsSUFBSSxLQUFLLEVBQUUsSUFBSSxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFBRSxPQUFPLElBQUksR0FBRyxDQUFBO1FBQ2xFLElBQUcsU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLEVBQUU7WUFBRSxPQUFPLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDM0UsSUFBRyxTQUFTLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUFFLE9BQU8sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDbEgsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDO0FBU0QsTUFBTSxDQUFDLEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxRQUFlLEVBQUUsT0FBb0M7SUFDN0YsTUFBTSxVQUFVLEdBQUcsT0FBTyxFQUFFLGdCQUFnQixJQUFJLFFBQVEsQ0FBQTtJQUN4RCxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsVUFBVSxFQUFFO1FBQ3hDO1lB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