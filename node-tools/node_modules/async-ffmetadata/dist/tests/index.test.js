import * as assert from "assert";
import { getExecString, getMetaDataFromFile, setMetaDataToFile } from '../index';
import * as ffmetadata from '../index';
const fs = require('fs');
const path = require('path');
describe('getExecString: ', () => {
    it('Basic Functionality', () => {
        const result = getExecString('testcom', [
            {
                name: "t",
                value: "test"
            }
        ]);
        const expected = "testcom -t test";
        assert.strictEqual(result, expected);
    });
    it('Basic Functionality - multiple attributes', () => {
        const result = getExecString('testcom', [
            {
                name: "t",
                value: "test"
            },
            {
                name: "d",
                value: "tert"
            },
            {
                name: "x",
                value: "tunt"
            }
        ]);
        const expected = "testcom -t test -d tert -x tunt";
        assert.strictEqual(result, expected);
    });
    it('empty attributes name and/or value', () => {
        const result = getExecString('testcom', [
            {
                name: "",
                value: "test"
            },
            {
                name: "d",
                value: ""
            },
            {
                name: "",
                value: ""
            }
        ]);
        const expected = "testcom test -d";
        assert.strictEqual(result, expected);
    });
});
describe('getMetaDataFromFile', () => {
    it('Basic Functionality - Should return Object with Metadata', async () => {
        const pathToFile = path.join(__dirname, 'test.mp3');
        const result = await getMetaDataFromFile(pathToFile);
        const expected = {
            albumArtist: 'AlbumInterpret',
            encoder: 'Lavf58.45.100',
            title: 'TestTitle',
            track: '1'
        };
        assert.deepStrictEqual(expected, result);
    });
    it('Diffrent Import - Should return Object with Metadata D', async () => {
        const pathToFile = path.join(__dirname, 'test.mp3');
        const result = await ffmetadata.getMetaDataFromFile(pathToFile);
        const expected = {
            albumArtist: 'AlbumInterpret',
            encoder: 'Lavf58.45.100',
            title: 'TestTitle',
            track: '1'
        };
        assert.deepStrictEqual(expected, result);
    });
    it('File not There - Should return empty Object', async () => {
        const pathToFile = path.join(__dirname, 'NotThere.mp3');
        const result = await getMetaDataFromFile(pathToFile);
        const expected = {};
        assert.deepStrictEqual(expected, result);
    });
    it('File not There [DiffrentImport] - Should return empty Object', async () => {
        const pathToFile = path.join(__dirname, 'NotThere.mp3');
        const result = await ffmetadata.getMetaDataFromFile(pathToFile);
        const expected = {};
        assert.deepStrictEqual(expected, result);
    });
}).timeout("3s").slow("2s");
describe('setMetaDataToFile', () => {
    it('Basic Functionlity - Should return true', async () => {
        const pathToFile = path.join(__dirname, 'test.mp3');
        const pathToSaveFile = path.join(__dirname, '__test.mp3');
        const result = await setMetaDataToFile({
            album: 'Test Album'
        }, pathToFile, pathToSaveFile);
        const expected = true;
        const resultMetaData = await getMetaDataFromFile(pathToSaveFile);
        const expectedMetaData = {
            album: 'Test Album',
            albumArtist: 'AlbumInterpret',
            encoder: 'Lavf58.45.100',
            title: 'TestTitle',
            track: '1'
        };
        assert.strictEqual(result, expected);
        assert.deepStrictEqual(expectedMetaData, resultMetaData);
        fs.unlinkSync(pathToSaveFile);
    });
    it('File not There - Should return false', async () => {
        const pathToFile = path.join(__dirname, 'NotThere.mp3');
        const pathToSaveFile = path.join(__dirname, 'NotThere2.mp3');
        const result = await setMetaDataToFile({
            album: 'Test Album'
        }, pathToFile, pathToSaveFile);
        const expected = false;
        assert.strictEqual(expected, result);
    });
    it('Input same as Output - Should return false', async () => {
        const pathToFile = path.join(__dirname, 'test.mp3');
        const result = await setMetaDataToFile({
            album: 'Test Album'
        }, pathToFile, pathToFile);
        const expected = false;
        assert.strictEqual(expected, result);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9pbmRleC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFBO0FBQ2hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDaEYsT0FBTyxLQUFLLFVBQVUsTUFBTSxVQUFVLENBQUE7QUFDdEMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3hCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUU1QixRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDN0IsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsRUFBRTtZQUN0QztnQkFDRSxJQUFJLEVBQUUsR0FBRztnQkFDVCxLQUFLLEVBQUUsTUFBTTthQUNkO1NBQ0YsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxRQUFRLEdBQUcsaUJBQWlCLENBQUE7UUFFbEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDdEMsQ0FBQyxDQUFDLENBQUE7SUFDRixFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO1FBQ25ELE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxTQUFTLEVBQUU7WUFDdEM7Z0JBQ0UsSUFBSSxFQUFFLEdBQUc7Z0JBQ1QsS0FBSyxFQUFFLE1BQU07YUFDZDtZQUNEO2dCQUNFLElBQUksRUFBRSxHQUFHO2dCQUNULEtBQUssRUFBRSxNQUFNO2FBQ2Q7WUFDRDtnQkFDRSxJQUFJLEVBQUUsR0FBRztnQkFDVCxLQUFLLEVBQUUsTUFBTTthQUNkO1NBQ0YsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxRQUFR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QU0sR0FBRyxNQUFNLGlCQUFpQixDQUFDO1lBQ3JDLEtBQUssRUFBRSxZQUFZO1NBQ3BCLEVBQUUsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFBO1FBQzlCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQTtRQUV0QixNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN0QyxDQUFDLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMxRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUVuRCxNQUFNLE1BQU0sR0FBRyxNQUFNLGlCQUFpQixDQUFDO1lBQ3JDLEtBQUssRUFBRSxZQUFZO1NBQ3BCLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQzFCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQTtRQUV0QixNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN0QyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIn0=